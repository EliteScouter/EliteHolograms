buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'
apply plugin: 'maven-publish'

group = 'com.strictgaming.elite.holograms'
version = '1.20.1-1.0.4'
archivesBaseName = 'EliteHolograms'

// Java version compatibility
sourceCompatibility = '17'
targetCompatibility = '17'

// Set Java compatibility level
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Ensure Java compatibility for all compilation tasks
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17
}

minecraft {
    // Update to Minecraft 1.20.1
    mappings channel: 'official', version: '1.20.1'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            mods {
                eliteholograms {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            mods {
                eliteholograms {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    // Update to Forge for 1.20.1
    minecraft 'net.minecraftforge:forge:1.20.1-47.2.0'

    // Core dependencies that will be included in the JAR
    compileOnly group: 'org.spongepowered', name: 'configurate-yaml', version: '4.0.0'
    
    // GSON is already provided by Forge - use 'implementation' instead of 'embed'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    
    // Permission system APIs (compileOnly - they're provided by the server)
    compileOnly 'net.luckperms:api:5.4'
    
    // Our own API module
    embed project(':api')
}

// Process resources
processResources {
    inputs.property 'version', project.version
    
    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}

// Create a fat JAR that includes our dependencies
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // Add all dependencies to the JAR
    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    // Exclude META-INF files from dependencies
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "**/module-info.class"
    
    // Ensure reproducible builds
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    
    manifest {
        attributes(
            'Specification-Title': project.name,
            'Specification-Vendor': 'strictgaming',
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'strictgaming'
        )
    }
}

// Fix reobf dependency
reobf {
    jar {}
}

// Only register the task if it doesn't already exist
tasks.findByName('versionedRelease') ?: tasks.register('versionedRelease', Copy) {
    from("build/libs/${archivesBaseName}-${version}.jar")
    into('../../release/')
    rename("${archivesBaseName}-${version}.jar", "${archivesBaseName}-${version}-Forge1.20.1.jar")
}

build.finalizedBy('versionedRelease')

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        
        // Force Java 17 compatibility
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    
    tasks.withType(GroovyCompile) {
        // Force Groovy to use Java 17 compatibility
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
} 